name: Deploy to Azure VM

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.100'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Publish
      run: dotnet publish --no-build --configuration Release -o ./publish
        
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
        
    - name: Adding Known Hosts
      run: ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts

    - name: Setup Directory on VM
      run: |
        ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }} '
          sudo mkdir -p /var/www/${{ secrets.PROJECT_NAME }}
          sudo chown -R ${{ secrets.AZURE_VM_USERNAME }}:${{ secrets.AZURE_VM_USERNAME }} /var/www
          sudo chmod -R 755 /var/www
        '
        
    - name: Deploy to Azure VM
      run: |
        rsync -avz --delete ./publish/ ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }}:/var/www/${{ secrets.PROJECT_NAME }}/
    
    - name: Setup and Restart Services on VM
      run: |
        ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }} '
          # Stop existing services
          sudo systemctl stop ${{ secrets.PROJECT_NAME }}.service || true
          sudo systemctl stop nginx || true

          # Update package list
          sudo apt-get update

          # Install .NET SDK and Runtime
          wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-8.0
          sudo apt-get install -y aspnetcore-runtime-8.0

          # Install Nginx
          sudo apt-get install -y nginx

          # Set correct permissions
          sudo chown -R ${{ secrets.AZURE_VM_USERNAME }}:${{ secrets.AZURE_VM_USERNAME }} /var/www/${{ secrets.PROJECT_NAME }}
          sudo chmod -R 755 /var/www/${{ secrets.PROJECT_NAME }}

          # Create/Update systemd service
          sudo tee /etc/systemd/system/${{ secrets.PROJECT_NAME }}.service << EOF
          [Unit]
          Description=.NET Web App
          After=network.target

          [Service]
          WorkingDirectory=/var/www/${{ secrets.PROJECT_NAME }}
          ExecStart=/usr/bin/dotnet /var/www/${{ secrets.PROJECT_NAME }}/${{ secrets.PROJECT_NAME }}.dll
          Restart=always
          RestartSec=10
          KillSignal=SIGINT
          User=${{ secrets.AZURE_VM_USERNAME }}
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://0.0.0.0:${{ secrets.APP_PORT }}
          Environment=DOTNET_GCHeapHardLimit=800000000
          Environment=COMPlus_GCHeapHardLimit=800000000

          [Install]
          WantedBy=multi-user.target
          EOF

          # Create/Update Nginx configuration
          sudo tee /etc/nginx/sites-available/${{ secrets.PROJECT_NAME }} << EOF
          server {
              listen 80;
              server_name ${{ secrets.AZURE_VM_IP }};

              proxy_http_version 1.1;
              proxy_set_header Host \$host;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection keep-alive;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
              proxy_cache_bypass \$http_upgrade;

              proxy_read_timeout 90;
              proxy_connect_timeout 90;

              location /swagger {
                  proxy_pass http://localhost:${{ secrets.APP_PORT }}/swagger;
              }

              location /swagger/v1/swagger.json {
                  proxy_pass http://localhost:${{ secrets.APP_PORT }}/swagger/v1/swagger.json;
              }

              location / {
                  proxy_pass http://localhost:${{ secrets.APP_PORT }};
              }
          }
          EOF

          # Enable the site and remove default
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo ln -sf /etc/nginx/sites-available/${{ secrets.PROJECT_NAME }} /etc/nginx/sites-enabled/

          # Test Nginx configuration
          sudo nginx -t

          # Clean up old processes (if any)
          sudo pkill -f dotnet || true

          # Reload systemd and restart services
          sudo systemctl daemon-reload
          sudo systemctl enable ${{ secrets.PROJECT_NAME }}.service
          sudo systemctl start ${{ secrets.PROJECT_NAME }}.service
          sudo systemctl start nginx

          # Verify services are running
          echo "Service Status:"
          sudo systemctl status ${{ secrets.PROJECT_NAME }}.service --no-pager
          echo "Nginx Status:"
          sudo systemctl status nginx --no-pager
          # Final service verification
          sudo systemctl restart nginx
          sudo systemctl start ${{ secrets.PROJECT_NAME }}.service

          # Check final status
          echo "Service Status:"
          sudo systemctl status ${{ secrets.PROJECT_NAME }}.service --no-pager
          echo "Nginx Status:"
          sudo systemctl status nginx --no-pager
        '
        '
